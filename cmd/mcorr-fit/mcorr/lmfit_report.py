#!/usr/bin/env python3
import os
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
#from mcorr import fit_p2
from mcorr import fit_p2, read_corr, FitDatas, \
    write_fitting_results, plot_fit, plot_params, write_fitting_reports, \
    geom_r1, const_r1
from mcorr.fit import fit_model
from lmfit import fit_report

def main():
    """Run fitting using lmfit, and generate output files and plots"""
    parser = ArgumentParser(
        formatter_class=ArgumentDefaultsHelpFormatter,
        description="Get goodness of fit statistics.")
    parser.add_argument("corr_file", type = str, help='correlation input file')
    parser.add_argument("output_prefix", type=str, help='output file prefix')
    parser.add_argument('--fit_start', type=int, default=3,
                        help='fitting range starts at')
    parser.add_argument('--fit_end', type=int, default=300,
                        help='fitting range ends at')
   # parser.add_argument("--use_geom_frag", action="store_true",
    #                    help='use geometric distribution for fragment sizes')
    #parser.add_argument('--quiet', action="store_true")
    #parser.add_argument("--title", type=str, help="plot title", default="")
    opts = parser.parse_args()
    corr_file = opts.corr_file
    prefix = opts.output_prefix
    fit_start = opts.fit_start
    fit_end = opts.fit_end
    #quiet = opts.quiet
    #use_geom_frag = opts.use_geom_frag
    #title = opts.title

    ##for testing fixes
    # dir = '/Volumes/aps_timemachine/recombo/APS160.5_lmfit/cluster8_cluster221'
    # corr_file = os.path.join(dir, 'cluster8_cluster221_CORE_XMFA_OUT.csv')
    # prefix = 'cluster8_cluster221_FLEX_FIT_OUT'
    # fit_start = 3
    # fit_end = 300
    # quiet = False
    # use_geom_frag = False
    # title=""

    # read correlation results and prepare fitting data
    corr_results = read_corr(corr_file)
    fitdatas = FitDatas(corr_results, fit_start, fit_end)
    r1_func = const_r1
    ## write a fit report as generated by lmfit (includes chi-squared, uncertainties, etc)
    all = fitdatas.get("all")
    actualdata = fit_model(all.xvalues, all.yvalues, all.d_sample, r1_func)
    lmfitreport = fit_report(actualdata)
    lmfitfile = prefix + "_lmfit_report.txt"
    with open(lmfitfile, "w+") as out:
        out.write(lmfitreport)

if __name__ == "__main__":
    main()
